version: "3.7" 

networks:
        cluster:

services:
        db:
                image: postgres:14.1-alpine
                restart: unless-stopped
                environment:
                        - POSTGRES_USER=user
                        - POSTGRES_PASSWORD=password
                volumes: 
                        - type: bind
                          source: ./app-data/init-armiarma.sql
                          target: /docker-entrypoint-initdb.d/docker_postgres_init.sql
                        - ./app-data/postgresql_db:/var/lib/postgresql/data
                networks: [ cluster ]
                ports:
                        - "127.0.0.1:${DB_PORT}:5432"
                healthcheck:
                  test: pg_isready -U user -d armiarmadb
                  interval: 10s
                  timeout: 3s
                  retries: 3

        prometheus:
                image: prom/prometheus:v2.36.2
                restart: unless-stopped
                volumes:
                        - type: bind
                          source: ./prometheus/
                          target: /etc/prometheus/
                        - ./app-data/prometheus_db:/prometheus/data

                command:
                        - '--config.file=/etc/prometheus/docker-prometheus.yml'
                        - '--web.console.libraries=/usr/share/prometheus/console_libraries'
                        - '--web.console.templates=/usr/share/prometheus/consoles'
                networks: [ cluster ]
                ports: 
                        - "127.0.0.1:9090:9090"

        grafana:
                build: './grafana'
                container_name: 'grafana'
                environment:
                        - Datasource=Armiarma
                networks: [ cluster ]
                ports: 
                        - "127.0.0.1:3000:3000"

        eth_crawler:
                image: "armiarma:latest"
                build:
                        context: .
                        dockerfile: Dockerfile
                env_file: .env
                command: |
                        eth2
                        --log-level=${CRAWLER_LOG_LEVEL}
                        --psql-endpoint=${CRAWLER_PSQL_ENDP}
                        --peers-backup=${CRAWLER_PEERS_BACKUP}
                        --fork-digest=${CRAWLER_FORK_DIGEST}
                        --gossip-topic=${CRAWLER_GOSSIP_TOPIC}
                        --subnet=${CRAWLER_SUBNET}
                        --persist-connevents=${CRAWLER_PERSIST_CONNEVENTS}
                restart: unless-stopped
                depends_on: 
                  db:
                    condition: service_healthy
                networks: [ cluster ]
                ports: 
                        - "${CRAWLER_PORT}:9020"
                        - "127.0.0.1:${CRAWLER_METRICS_PORT}:9080"
                volumes:
                        - ./pkg/utils/apis/database:/app/database
